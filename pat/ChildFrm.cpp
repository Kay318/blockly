// ChildFrm.cpp : implementation of the CChildFrame class
//
// Generated by Codejock Toolkit Pro Application Wizard.
// Contact information:
//     support@codejock.com
//     http://www.codejock.com
//

#include "stdafx.h"
#include <locale>
#include <algorithm>

#include "XTPApplication1.h"
#include "XTPApplication1View.h"

#include "ChildFrm.h"
#include <filesystem>

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

IMPLEMENT_DYNCREATE(CChildFrame, CMDIChildWnd)

BEGIN_MESSAGE_MAP(CChildFrame, CMDIChildWnd)
    ON_WM_CREATE()
    ON_WM_SIZE()
END_MESSAGE_MAP()

CChildFrame::CChildFrame()
{
}

CChildFrame::~CChildFrame()
{
}

BOOL CChildFrame::OnCreateClient(LPCREATESTRUCT lpcs, CCreateContext* pContext)
{
    if (!CMDIChildWnd::OnCreateClient(lpcs, pContext))
        return FALSE;

    OnUpdateMDIChildrenTheme();

    return TRUE;
}

void CChildFrame::OnUpdateMDIChildrenTheme()
{
    CXTPMDIFrameWnd* pParentFrame = DYNAMIC_DOWNCAST(CXTPMDIFrameWnd, GetParentFrame());
    ASSERT_VALID(pParentFrame);

    CXTPCommandBars* pParentCommandBars = pParentFrame->GetCommandBars();
    ASSERT_VALID(pParentCommandBars);
    EnableFrameTheme(this, pParentCommandBars->GetPaintManager());

    // Send theme update notification to a view
    CXTPApplication1View* pView = DYNAMIC_DOWNCAST(CXTPApplication1View, GetActiveView());
    if (NULL != pView)
    {
        pView->OnThemeChanged();
    }

}

BOOL CChildFrame::PreCreateWindow(CREATESTRUCT& cs)
{
    if (!CMDIChildWnd::PreCreateWindow(cs))
        return FALSE;

    // TODO: Modify the Window class or styles here by modifying the CREATESTRUCT cs

    return TRUE;
}

int CChildFrame::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
    if (CMDIChildWnd::OnCreate(lpCreateStruct) == -1)
        return -1;

    InitializeWebView();

    return 0;
}

HRESULT CChildFrame::InitializeWebView()
{
    // WebView2 환경 설정 및 컨트롤 생성
    HRESULT hr = CreateCoreWebView2EnvironmentWithOptions(nullptr, nullptr, nullptr,
        Microsoft::WRL::Callback<ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler>(
            [this](HRESULT result, ICoreWebView2Environment* env) -> HRESULT
            {
                // 환경 생성 완료 후, WebView2 컨트롤러 생성
                env->CreateCoreWebView2Controller(GetSafeHwnd(),
                    Microsoft::WRL::Callback<ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>(
                        [this](HRESULT result, ICoreWebView2Controller* controller) -> HRESULT
                        {
                            if (controller != nullptr) {
                                m_webViewController = controller;
                                controller->get_CoreWebView2(&m_webView);

                                // WebView2 컨트롤의 크기와 위치 설정
                                RECT rc;
                                GetClientRect(&rc);
                                m_webViewController->put_Bounds(rc);

                                //// 로컬 HTML 파일의 경로 설정
                                //std::wstring path = L"D:\\blockly\\pat\\pat\\XTPApplication1\\blockly\\index.html";
                                //std::wstring url = L"file:///" + path;
                                //std::replace(url.begin(), url.end(), '\\', '/');
                                std::wstring url = L"file:///D:/blockly/pat/pat/XTPApplication1/blockly/index.html";
                                m_webView->Navigate(url.c_str());
                            }
                            return S_OK;
                        }).Get());
                return S_OK;
            }).Get());

    return hr;
}

void CChildFrame::OnSize(UINT nType, int cx, int cy)
{
    CMDIChildWnd::OnSize(nType, cx, cy);

    // WebView2 컨트롤의 크기 조정
    if (m_webViewController != nullptr)
    {
        RECT rc;
        GetClientRect(&rc);
        m_webViewController->put_Bounds(rc);
    }
}