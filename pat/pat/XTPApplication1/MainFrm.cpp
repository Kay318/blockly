// MainFrm.cpp : implementation of the CMainFrame class
//
// Generated by Codejock Toolkit Pro Application Wizard.
// Contact information:
//     support@codejock.com
//     http://www.codejock.com
//

#include "stdafx.h"

#include "XTPApplication1.h"
#include "XTPApplication1View.h"
#include "CustomizePageGeneral.h"
#include "MainFrm.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

IMPLEMENT_DYNCREATE(CMainFrame, CXTPMDIFrameWnd)

BEGIN_MESSAGE_MAP(CMainFrame, CXTPMDIFrameWnd)
	ON_WM_CREATE()
	ON_WM_DESTROY()
	ON_WM_SETTINGCHANGE()
	ON_COMMAND(ID_WINDOW_ARRANGE, &CMainFrame::OnWindowArrange)
	ON_COMMAND(ID_WINDOW_CASCADE, &CMainFrame::OnWindowCascade)
	ON_COMMAND(ID_WINDOW_TILE_HORZ, &CMainFrame::OnWindowTileHorz)
	ON_COMMAND(ID_WINDOW_TILE_VERT, &CMainFrame::OnWindowTileVert)
	ON_UPDATE_COMMAND_UI(ID_WINDOW_MANAGER, &CMainFrame::OnUpdateEnableMDIWindows)
	ON_COMMAND(XTP_ID_CUSTOMIZE, &CMainFrame::OnCustomize)
	ON_COMMAND(XTP_ID_RIBBONCUSTOMIZE, &CMainFrame::OnCustomizeQuickAccess)
	ON_COMMAND(ID_BACKSTAGE_OPTIONS, &CMainFrame::OnCustomize)
	ON_COMMAND_RANGE(ID_OPTIONS_STYLE_DISABLED, ID_OPTIONS_STYLE_WINDOWS7SCENIC, &CMainFrame::OnOptionsStyle)
	ON_UPDATE_COMMAND_UI_RANGE(ID_OPTIONS_STYLE_DISABLED, ID_OPTIONS_STYLE_WINDOWS7SCENIC, &CMainFrame::OnUpdateOptionsStyle)
END_MESSAGE_MAP()

CMainFrame::CMainFrame()
	: m_bThemeApplied(FALSE)
	, m_nAppliedTheme(xtpThemeNone)
	, m_pRibbonBar(NULL)
	, m_pDefaultSystemButtonCommandBar(NULL)
	, m_pBackstageView(NULL)
{
	// TODO: add member initialization code here
}

CMainFrame::~CMainFrame()
{
	// TODO: add cleanup code here
}

int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (BaseFrame::OnCreate(lpCreateStruct) == -1)
	{
		TRACE(_T("ERROR: Failed to create main frame.\n"));
		return -1;
	}

	// Default menu has to be disabled so that it does not overlap CommandBars
	SetMenu(NULL);

	if (!CreateStatusBar())
	{
		TRACE(_T("ERROR: Failed to create the status bar.\n"));
		return -1;
	}

	if (!InitCommandBars())
	{
		TRACE(_T("ERROR: Failed to initialize command bars.\n"));
		return -1;
	}

	if (!CreateRibbonBar())
	{
		TRACE(_T("ERROR: Failed to initialize the ribbon bar.\n"));
		return -1;
	}

	ModifyStyle(0, FWS_PREFIXTITLE);
	if (!CreateTabClient())
	{
		TRACE(_T("ERROR: Failed to create tab client.\n"));
		return -1;
	}


	InitTooltips();
	UpdateTheme();

	return 0;
}

void CMainFrame::OnDestroy()
{
	if (NULL != m_pDefaultSystemButtonCommandBar)
	{
		m_pDefaultSystemButtonCommandBar->InternalRelease();
	}

	BaseFrame::OnDestroy();
}

void CMainFrame::EnableTheme(XTPPaintTheme nTheme, LPCTSTR lpzThemeSettings, BOOL bEnable /*= TRUE*/)
{
	ASSERT(NULL != lpzThemeSettings);

	switch (nTheme)
	{
	case xtpThemeNone:
		EnableNoStyle(bEnable);
		break;
	case xtpThemeOffice2013:
		if (0 < _tcsstr(lpzThemeSettings, _T("OFFICE2013")))
		{
			EnableStyleOffice2013(bEnable);
		}
		else if (0 < _tcsstr(lpzThemeSettings, _T("OFFICE2016")))
		{
			EnableStyleOffice2016(bEnable);
		}
		else
		{
			ASSERT(!"Unexpected theme settings");
		}
		break;
	case xtpThemeVisualStudio2015:
		EnableStyleVisualStudio2015(bEnable);
		break;
	case xtpThemeResource:
		if (0 < _tcsstr(lpzThemeSettings, _T("OFFICE2007")))
		{
			EnableStyleOffice2007(bEnable);
		}
		else if (0 < _tcsstr(lpzThemeSettings, _T("OFFICE2010")))
		{
			EnableStyleOffice2010(bEnable);
		}
		else if (0 < _tcsstr(lpzThemeSettings, _T("WINDOWS7")))
		{
			EnableStyleWindows7(bEnable);
		}
		else
		{
			ASSERT(!"Unexpected theme settings");
		}
		break;
	default:
		ASSERT(!"Unsupported theme");
		break;
	}
}

void CMainFrame::UpdateTheme()
{
	XTPPaintTheme nNewTheme = theApp.GetAppTheme();
	CString strNewThemeSettings = theApp.GetAppThemeSettings();

	if (m_bThemeApplied 
		&& m_nAppliedTheme == nNewTheme 
		&& m_strAppliedThemeSettings == strNewThemeSettings)
	{
		// No change required.
		return;
	}

	CWaitCursor wait;

	// Enable new theme.
	EnableTheme(nNewTheme, strNewThemeSettings);

	m_nAppliedTheme = nNewTheme;
	m_strAppliedThemeSettings = strNewThemeSettings;

	CXTPCommandBars* pCommandBars = GetCommandBars();
	pCommandBars->GetPaintManager()->m_bAutoResizeIcons = TRUE;
	pCommandBars->GetPaintManager()->RefreshMetrics();
	pCommandBars->GetImageManager()->RefreshAll();
	pCommandBars->RedrawCommandBars();
	m_wndTabClient.GetPaintManager()->RefreshMetrics();

	SendMessage(WM_NCPAINT);
	RedrawWindow(0, 0, RDW_ALLCHILDREN | RDW_INVALIDATE);
}

BOOL CMainFrame::PreCreateWindow(CREATESTRUCT& cs)
{
	if (!BaseFrame::PreCreateWindow(cs))
		return FALSE;

	cs.style = WS_OVERLAPPED 
		| WS_CAPTION 
		| WS_THICKFRAME 
		| WS_MINIMIZEBOX 
		| WS_MAXIMIZEBOX 
		| WS_SYSMENU
		| FWS_ADDTOTITLE;

	cs.lpszClass = _T("XTPApplication1");
	CXTPDrawHelpers::RegisterWndClass(AfxGetInstanceHandle(), cs.lpszClass,
		CS_DBLCLKS, AfxGetApp()->LoadIcon(IDR_MAINFRAME));

	// TODO: Modify the Window class or styles here by modifying
	//  the CREATESTRUCT cs

	return TRUE;
}

BOOL CMainFrame::CreateRibbonBar()
{
	ASSERT(NULL == m_pRibbonBar);

	CXTPCommandBars* pCommandBars = GetCommandBars();
	m_pRibbonBar = (CXTPRibbonBar*)pCommandBars->Add(
		_T("The Ribbon"), xtpBarTop, RUNTIME_CLASS(CXTPRibbonBar));
	if (NULL == m_pRibbonBar)
	{
		TRACE(_T("ERROR: Unable to add ribbon.\n"));
		return FALSE;
	}

	CXTPRibbonBuilder builder;
	if (!builder.LoadFromResource(IDR_RIBBON))
	{
		TRACE(_T("ERROR: Unable to load ribbon.\n"));
		return FALSE;
	}

	if (!builder.Build(m_pRibbonBar))
	{
		TRACE(_T("ERROR: Unable to build ribbon.\n"));
		return FALSE;
	}

	pCommandBars->GetCommandBarsOptions()->bShowKeyboardTips = TRUE;
	m_pDefaultSystemButtonCommandBar = m_pRibbonBar->GetSystemButton()->GetCommandBar();
	m_pDefaultSystemButtonCommandBar->InternalAddRef();
	m_pRibbonBar->EnableCustomization(TRUE);

	return TRUE;
}

void CMainFrame::CreateBackstage()
{
	ASSERT(NULL == m_pBackstageView);
	ASSERT_VALID(m_pRibbonBar);

	m_pBackstageView = CXTPRibbonBackstageView::CreateBackstageView(GetCommandBars());
	ASSERT_VALID(m_pBackstageView);

	m_pBackstageView->AddCommand(ID_FILE_SAVE);
	m_pBackstageView->AddCommand(ID_FILE_SAVE_AS);
	m_pBackstageView->AddCommand(ID_FILE_OPEN);

	if (!::IsWindow(m_wndBackstagePageRecent))
	{
		m_wndBackstagePageRecent.Create(CXTPRibbonBackstagePageRecent::IDD, this);
	}

	CXTPRibbonBackstageTab* pTabRecent = m_pBackstageView->AddTab(&m_wndBackstagePageRecent, ID_BACKSTAGE_RECENT);
	pTabRecent->SetFlags(xtpFlagManualUpdate);

	m_pBackstageView->AddCommand(ID_BACKSTAGE_OPTIONS);

	m_pBackstageView->AddCommand(ID_APP_EXIT);

	pTabRecent->SetItemDefault(TRUE);

	m_pRibbonBar->GetSystemButton()->SetCommandBar(m_pBackstageView);

	m_pBackstageView->InternalRelease();
}

void CMainFrame::DestroyBackstage()
{
	ASSERT_VALID(m_pBackstageView);
	ASSERT_VALID(m_pRibbonBar);
	m_pRibbonBar->GetSystemButton()->SetCommandBar(m_pDefaultSystemButtonCommandBar);
	m_pBackstageView = NULL;
}

BOOL CMainFrame::CreateStatusBar()
{
	ASSERT(!::IsWindow(m_wndStatusBar));

	static const UINT indicators[] =
	{
		ID_SEPARATOR,           // status line indicator
		ID_INDICATOR_CAPS,
		ID_INDICATOR_NUM,
		ID_INDICATOR_SCRL,
	};

	if (!m_wndStatusBar.Create(this))
	{
		TRACE(_T("ERROR: Unable to create status bar.\n"));
		return FALSE;
	}

	m_wndStatusBar.SetIndicators(indicators, _countof(indicators));
	return TRUE;
}

BOOL CMainFrame::CreateTabClient()
{
	if (!m_wndTabClient.Attach(this, FALSE))
	{
		TRACE(_T("ERROR: Unable to create tab client.\n"));
		return FALSE;
	}

	m_wndTabClient.ShowWorkspace(FALSE);
	m_wndTabClient.EnableToolTips();
	m_wndTabClient.GetPaintManager()->m_bShowIcons = TRUE;
	m_wndTabClient.SetFlags(xtpWorkspaceHideClose | xtpWorkspaceHideArrowsAlways | xtpWorkspaceShowActiveFiles | xtpWorkspaceShowCloseTab);

	return TRUE;
}

void CMainFrame::InitTooltips()
{
	CXTPToolTipContext* pToolTipContext = GetCommandBars()->GetToolTipContext();
	ASSERT_VALID(pToolTipContext);

	pToolTipContext->ShowTitleAndDescription();
	pToolTipContext->ShowImage(TRUE, 0);
	pToolTipContext->SetMargin(XTP_DPI(CRect(2, 2, 2, 2)));
	pToolTipContext->SetMaxTipWidth(XTP_DPI_X(180));
	pToolTipContext->SetFont(GetCommandBars()->GetPaintManager()->GetIconFont());
	pToolTipContext->SetDelayTime(TTDT_INITIAL, 900);
}

void CMainFrame::SetTooltipStyle(XTPToolTipStyle nStyle)
{
	CXTPToolTipContext* pToolTipContext = NULL;
	// Update tooltip styles.
	pToolTipContext = m_wndStatusBar.GetToolTipContext();
	if (NULL != pToolTipContext)
	{
		pToolTipContext->SetStyle(nStyle);
	}

	pToolTipContext = GetCommandBars()->GetToolTipContext();
	if (NULL != pToolTipContext)
	{
		pToolTipContext->SetStyle(nStyle);
	}
}

void CMainFrame::SetFrameIcon(CSize szIcon)
{
	HICON hIcon = reinterpret_cast<HICON>(::LoadImage(AfxGetResourceHandle(), 
		MAKEINTRESOURCE(IDR_MAINFRAME), IMAGE_ICON, szIcon.cx, szIcon.cy, LR_SHARED));
	if (NULL == hIcon)
	{
		TRACE(_T("ERROR: Unable to load frame icon.\n"));
		return;
	}

	GetCommandBars()->GetPaintManager()->GetFramePaintManager()->SetIcon(hIcon, szIcon);
}

void CMainFrame::UpdateChildrenTheme()
{
	UpdateMDIChildrenTheme();
}

void CMainFrame::DisableStyle()
{
	SetTooltipStyle(xtpToolTipStandard);
	DisableFrameTheme();

	ASSERT_VALID(m_pRibbonBar);
	m_pRibbonBar->GetSystemButton()->SetStyle(xtpButtonAutomatic);
	UpdateChildrenTheme();
}

void CMainFrame::EnableNoStyle(BOOL bEnable /*= TRUE*/)
{
	if (bEnable)
	{
		CXTPCommandBarsFrameHook::m_bAllowDwm = FALSE;
		EnableFrameTheme(GetCommandBars());
	}
	else
	{
		DisableFrameTheme();
	}
	
	UpdateChildrenTheme();
}

void CMainFrame::EnableStyleOffice2007(BOOL bEnable /*= TRUE*/)
{
	if (bEnable)
	{
		SetTooltipStyle(xtpToolTipOffice2007);
		EnableFrameTheme(GetCommandBars());


		UpdateChildrenTheme();
	}
	else
	{
		DisableStyle();
	}
}

void CMainFrame::EnableStyleOffice2010(BOOL bEnable /*= TRUE*/)
{
	if (bEnable)
	{
		ASSERT_VALID(m_pRibbonBar);

		SetTooltipStyle(xtpToolTipOffice);
		EnableFrameTheme(GetCommandBars());

		CreateBackstage();

		ASSERT_VALID(m_pBackstageView);
		m_pBackstageView->SetTheme(xtpThemeRibbon);
		m_pBackstageView->SetBackstageStyle(xtpRibbonBackstageOffice2010Style);
		
		if (::IsWindow(m_wndBackstagePageRecent))
		{
			m_wndBackstagePageRecent.SetTheme(xtpControlThemeResource);
		}

		m_pRibbonBar->GetSystemButton()->SetStyle(xtpButtonCaption);

		UpdateChildrenTheme();
	}
	else
	{
		DestroyBackstage();
		DisableStyle();
	}
}

void CMainFrame::EnableStyleOffice2013(BOOL bEnable /*= TRUE*/)
{
	if (bEnable)
	{
		ASSERT_VALID(m_pRibbonBar);

		GetCommandBars()->SetAllCaps(TRUE);
		m_wndStatusBar.SetAllCaps(TRUE);

		SetTooltipStyle(xtpToolTipOffice2013);
		EnableFrameTheme(GetCommandBars());

		SetFrameIcon(CSize(20, 20));

		CreateBackstage();

		ASSERT_VALID(m_pBackstageView);
		m_pBackstageView->SetTheme(xtpThemeOffice2013);
		m_pBackstageView->SetBackstageStyle(xtpRibbonBackstageOffice2013Style);

		if (::IsWindow(m_wndBackstagePageRecent))
		{
			m_wndBackstagePageRecent.SetTheme(xtpControlThemeOffice2013);
		}

		m_pRibbonBar->GetSystemButton()->SetStyle(xtpButtonCaption);

		UpdateChildrenTheme();
	}
	else
	{
		DestroyBackstage();
		GetCommandBars()->SetAllCaps(FALSE);
		m_wndStatusBar.SetAllCaps(FALSE);
		SetFrameIcon(CSize(16, 16));
		DisableStyle();
	}
}

void CMainFrame::EnableStyleOffice2016(BOOL bEnable /*= TRUE*/)
{
	if (bEnable)
	{
		ASSERT_VALID(m_pRibbonBar);

		GetCommandBars()->SetAllCaps(TRUE);
		m_wndStatusBar.SetAllCaps(TRUE);

		SetTooltipStyle(xtpToolTipOffice2016);
		EnableFrameTheme(GetCommandBars());

		SetFrameIcon(CSize(20, 20));

		CreateBackstage();

		ASSERT_VALID(m_pBackstageView);
		m_pBackstageView->SetTheme(xtpThemeOffice2016);
		m_pBackstageView->SetBackstageStyle(xtpRibbonBackstageOffice2016Style);

		if (::IsWindow(m_wndBackstagePageRecent))
		{
			m_wndBackstagePageRecent.SetTheme(xtpControlThemeOffice2016);
		}

		m_pRibbonBar->GetSystemButton()->SetStyle(xtpButtonCaption);

		UpdateChildrenTheme();
	}
	else
	{
		DestroyBackstage();
		GetCommandBars()->SetAllCaps(FALSE);
		m_wndStatusBar.SetAllCaps(FALSE);
		SetFrameIcon(CSize(16, 16));
		DisableStyle();
	}
}

void CMainFrame::EnableStyleVisualStudio2015(BOOL bEnable /*= TRUE*/)
{
	if (bEnable)
	{
		ASSERT_VALID(m_pRibbonBar);

		GetCommandBars()->SetAllCaps(TRUE);
		m_wndStatusBar.SetAllCaps(TRUE);

		SetTooltipStyle(xtpToolTipStandard);
		EnableFrameTheme(GetCommandBars());

		SetFrameIcon(CSize(20, 20));

		CreateBackstage();

		ASSERT_VALID(m_pBackstageView);
		m_pBackstageView->SetTheme(xtpThemeVisualStudio2015);
		m_pBackstageView->SetBackstageStyle(xtpRibbonBackstageOffice2016Style);

		if (::IsWindow(m_wndBackstagePageRecent))
		{
			m_wndBackstagePageRecent.SetTheme(xtpControlThemeVisualStudio2015);
		}

		m_pRibbonBar->GetSystemButton()->SetStyle(xtpButtonCaption);

		UpdateChildrenTheme();
	}
	else
	{
		DestroyBackstage();
		GetCommandBars()->SetAllCaps(FALSE);
		m_wndStatusBar.SetAllCaps(FALSE);
		SetFrameIcon(CSize(16, 16));
		DisableStyle();
	}
}

void CMainFrame::EnableStyleWindows7(BOOL bEnable /*= TRUE*/)
{
	if (bEnable)
	{
		ASSERT_VALID(m_pRibbonBar);

		SetTooltipStyle(xtpToolTipLuna);
		EnableFrameTheme(GetCommandBars());

		CreateBackstage();

		ASSERT_VALID(m_pBackstageView);
		m_pBackstageView->SetTheme(xtpThemeRibbon);
		m_pBackstageView->SetBackstageStyle(xtpRibbonBackstageOffice2010Style);

		if (::IsWindow(m_wndBackstagePageRecent))
		{
			m_wndBackstagePageRecent.SetTheme(xtpControlThemeResource);
		}

		m_pRibbonBar->GetSystemButton()->SetStyle(xtpButtonCaption);

		UpdateChildrenTheme();
	}
	else
	{
		DestroyBackstage();
		DisableStyle();
	}
}

void CMainFrame::OnCustomize()
{
	ShowOptionsDialog();
}

void CMainFrame::OnCustomizeQuickAccess()
{
	ShowOptionsDialog(xtpOptionsPageGeneral);
}

void CMainFrame::OnOptionsStyle(UINT nStyle)
{
	CWaitCursor wait;

	// Disable previous theme.
	XTPPaintTheme nNewTheme = theApp.GetAppTheme();
	CString strNewThemeSettings = theApp.GetAppThemeSettings();
	EnableTheme(m_nAppliedTheme, m_strAppliedThemeSettings, FALSE);

	switch (nStyle)
	{
		case ID_OPTIONS_STYLE_DISABLED:
			theApp.SetAppTheme(xtpThemeNone);
			break;
		case ID_OPTIONS_STYLE_OFFICE2007BLUE:
			theApp.SetAppTheme(xtpThemeResource, xtpIniOffice2007Blue);
			break;
		case ID_OPTIONS_STYLE_OFFICE2007SILVER:
			theApp.SetAppTheme(xtpThemeResource, xtpIniOffice2007Silver);
			break;
		case ID_OPTIONS_STYLE_OFFICE2007AQUA:
			theApp.SetAppTheme(xtpThemeResource, xtpIniOffice2007Aqua);
			break;
		case ID_OPTIONS_STYLE_OFFICE2007BLACK:
			theApp.SetAppTheme(xtpThemeResource, xtpIniOffice2007Black);
			break;
		case ID_OPTIONS_STYLE_OFFICE2010BLUE:
			theApp.SetAppTheme(xtpThemeResource, xtpIniOffice2010Blue);
			break;
		case ID_OPTIONS_STYLE_OFFICE2010SILVER:
			theApp.SetAppTheme(xtpThemeResource, xtpIniOffice2010Silver);
			break;
		case ID_OPTIONS_STYLE_OFFICE2010BLACK:
			theApp.SetAppTheme(xtpThemeResource, xtpIniOffice2010Black);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013ACCESS:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013Access);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013EXCEL:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013Excel);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013ONENOTE:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013OneNote);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013OUTLOOK:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013Outlook);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013POWERPOINT:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013PowerPoint);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013PUBLISHER:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013Publisher);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013WORD:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013Word);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013ACCESS_GRAYDARK:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013AccessGrayDark);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013EXCEL_GRAYDARK:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013ExcelGrayDark);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013ONENOTE_GRAYDARK:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013OneNoteGrayDark);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013OUTLOOK_GRAYDARK:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013OutlookGrayDark);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013POWERPOINT_GRAYDARK:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013PowerPointGrayDark);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013PUBLISHER_GRAYDARK:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013PublisherGrayDark);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013WORD_GRAYDARK:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013WordGrayDark);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013ACCESS_GRAYLIGHT:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013AccessGrayLight);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013EXCEL_GRAYLIGHT:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013ExcelGrayLight);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013ONENOTE_GRAYLIGHT:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013OneNoteGrayLight);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013OUTLOOK_GRAYLIGHT:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013OutlookGrayLight);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013POWERPOINT_GRAYLIGHT:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013PowerPointGrayLight);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013PUBLISHER_GRAYLIGHT:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013PublisherGrayLight);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013WORD_GRAYLIGHT:
			theApp.SetAppTheme(xtpThemeOffice2013, xtpIniOffice2013WordGrayLight);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016ACCESS_COLORFUL:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016AccessColorful);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016EXCEL_COLORFUL:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016ExcelColorful);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016ONENOTE_COLORFUL:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016OneNoteColorful);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016OUTLOOK_COLORFUL:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016OutlookColorful);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016POWERPOINT_COLORFUL:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016PowerPointColorful);
			break;   
		case ID_OPTIONS_STYLE_OFFICE2016PUBLISHER_COLORFUL:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016PublisherColorful);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016WORD_COLORFUL:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016WordColorful);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016ACCESS_WHITE:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016AccessWhite);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016EXCEL_WHITE:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016ExcelWhite);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016ONENOTE_WHITE:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016OneNoteWhite);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016OUTLOOK_WHITE:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016OutlookWhite);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016POWERPOINT_WHITE:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016PowerPointWhite);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016PUBLISHER_WHITE:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016PublisherWhite);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016WORD_WHITE:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016WordWhite);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016ACCESS_DARKGRAY:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016AccessDarkGray);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016EXCEL_DARKGRAY:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016ExcelDarkGray);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016ONENOTE_DARKGRAY:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016OneNoteDarkGray);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016OUTLOOK_DARKGRAY:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016OutlookDarkGray);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016POWERPOINT_DARKGRAY:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016PowerPointDarkGray);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016PUBLISHER_DARKGRAY:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016PublisherDarkGray);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016WORD_DARKGRAY:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016WordDarkGray);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016ACCESS_BLACK:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016AccessBlack);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016EXCEL_BLACK:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016ExcelBlack);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016ONENOTE_BLACK:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016OneNoteBlack);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016OUTLOOK_BLACK:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016OutlookBlack);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016POWERPOINT_BLACK:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016PowerPointBlack);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016PUBLISHER_BLACK:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016PublisherBlack);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016WORD_BLACK:
			theApp.SetAppTheme(xtpThemeOffice2016, xtpIniOffice2016WordBlack);
			break;
		case ID_OPTIONS_STYLE_VISUALSTUDIO2015LIGHT:
			theApp.SetAppTheme(xtpThemeVisualStudio2015, xtpIniVisualStudio2015Light);
			break;
		case ID_OPTIONS_STYLE_VISUALSTUDIO2015BLUE:
			theApp.SetAppTheme(xtpThemeVisualStudio2015, xtpIniVisualStudio2015Blue);
			break;
		case ID_OPTIONS_STYLE_VISUALSTUDIO2015DARK:
			theApp.SetAppTheme(xtpThemeVisualStudio2015, xtpIniVisualStudio2015Dark);
			break;
		case ID_OPTIONS_STYLE_WINDOWS7SCENIC:
			theApp.SetAppTheme(xtpThemeResource, xtpIniWindows7Blue);
			break;
		default:
			ASSERT(!"Unsupported theme selected");
			break;
	}

	UpdateTheme();
}

void CMainFrame::OnUpdateOptionsStyle(CCmdUI* pCmdUI)
{
	ASSERT(NULL != pCmdUI);

	BOOL bSet = FALSE;
	XTPPaintTheme nTheme = theApp.GetAppTheme();
	CString strThemeSettings = theApp.GetAppThemeSettings();

	switch (pCmdUI->m_nID)
	{
		case ID_OPTIONS_STYLE_DISABLED:
			bSet = (xtpThemeNone == nTheme);
			break;
		case ID_OPTIONS_STYLE_OFFICE2007BLUE:
			bSet = (xtpThemeResource == nTheme && strThemeSettings == xtpIniOffice2007Blue);
			break;
		case ID_OPTIONS_STYLE_OFFICE2007SILVER:
			bSet = (xtpThemeResource && strThemeSettings == xtpIniOffice2007Silver);
			break;
		case ID_OPTIONS_STYLE_OFFICE2007AQUA:
			bSet = (xtpThemeResource && strThemeSettings == xtpIniOffice2007Aqua);
			break;
		case ID_OPTIONS_STYLE_OFFICE2007BLACK:
			bSet = (xtpThemeResource && strThemeSettings == xtpIniOffice2007Black);
			break;
		case ID_OPTIONS_STYLE_OFFICE2010BLUE:
			bSet = (xtpThemeResource && strThemeSettings == xtpIniOffice2010Blue);
			break;
		case ID_OPTIONS_STYLE_OFFICE2010SILVER:
			bSet = (xtpThemeResource && strThemeSettings == xtpIniOffice2010Silver);
			break;
		case ID_OPTIONS_STYLE_OFFICE2010BLACK:
			bSet = (xtpThemeResource && strThemeSettings == xtpIniOffice2010Black);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013ACCESS:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013Access);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013EXCEL:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013Excel);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013ONENOTE:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013OneNote);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013OUTLOOK:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013Outlook);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013POWERPOINT:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013PowerPoint);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013PUBLISHER:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013Publisher);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013WORD:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013Word);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013ACCESS_GRAYDARK:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013AccessGrayDark);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013EXCEL_GRAYDARK:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013ExcelGrayDark);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013ONENOTE_GRAYDARK:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013OneNoteGrayDark);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013OUTLOOK_GRAYDARK:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013OutlookGrayDark);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013POWERPOINT_GRAYDARK:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013PowerPointGrayDark);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013PUBLISHER_GRAYDARK:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013PublisherGrayDark);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013WORD_GRAYDARK:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013WordGrayDark);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013ACCESS_GRAYLIGHT:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013AccessGrayLight);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013EXCEL_GRAYLIGHT:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013ExcelGrayLight);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013ONENOTE_GRAYLIGHT:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013OneNoteGrayLight);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013OUTLOOK_GRAYLIGHT:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013OutlookGrayLight);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013POWERPOINT_GRAYLIGHT:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013PowerPointGrayLight);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013PUBLISHER_GRAYLIGHT:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013PublisherGrayLight);
			break;
		case ID_OPTIONS_STYLE_OFFICE2013WORD_GRAYLIGHT:
			bSet = (xtpThemeOffice2013 && strThemeSettings == xtpIniOffice2013WordGrayLight);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016ACCESS_COLORFUL:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016AccessColorful);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016EXCEL_COLORFUL:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016ExcelColorful);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016ONENOTE_COLORFUL:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016OneNoteColorful);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016OUTLOOK_COLORFUL:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016OutlookColorful);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016POWERPOINT_COLORFUL:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016PowerPointColorful);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016PUBLISHER_COLORFUL:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016PublisherColorful);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016WORD_COLORFUL:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016WordColorful);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016ACCESS_WHITE:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016AccessWhite);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016EXCEL_WHITE:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016ExcelWhite);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016ONENOTE_WHITE:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016OneNoteWhite);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016OUTLOOK_WHITE:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016OutlookWhite);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016POWERPOINT_WHITE:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016PowerPointWhite);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016PUBLISHER_WHITE:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016PublisherWhite);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016WORD_WHITE:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016WordWhite);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016ACCESS_DARKGRAY:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016AccessDarkGray);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016EXCEL_DARKGRAY:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016ExcelDarkGray);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016ONENOTE_DARKGRAY:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016OneNoteDarkGray);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016OUTLOOK_DARKGRAY:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016OutlookDarkGray);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016POWERPOINT_DARKGRAY:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016PowerPointDarkGray);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016PUBLISHER_DARKGRAY:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016PublisherDarkGray);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016WORD_DARKGRAY:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016WordDarkGray);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016ACCESS_BLACK:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016AccessBlack);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016EXCEL_BLACK:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016ExcelBlack);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016ONENOTE_BLACK:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016OneNoteBlack);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016OUTLOOK_BLACK:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016OutlookBlack);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016POWERPOINT_BLACK:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016PowerPointBlack);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016PUBLISHER_BLACK:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016PublisherBlack);
			break;
		case ID_OPTIONS_STYLE_OFFICE2016WORD_BLACK:
			bSet = (xtpThemeOffice2016 && strThemeSettings == xtpIniOffice2016WordBlack);
			break;
		case ID_OPTIONS_STYLE_VISUALSTUDIO2015LIGHT:
			bSet = (xtpThemeVisualStudio2015 && strThemeSettings == xtpIniVisualStudio2015Light);
			break;
		case ID_OPTIONS_STYLE_VISUALSTUDIO2015BLUE:
			bSet = (xtpThemeVisualStudio2015 && strThemeSettings == xtpIniVisualStudio2015Blue);
			break;
		case ID_OPTIONS_STYLE_VISUALSTUDIO2015DARK:
			bSet = (xtpThemeVisualStudio2015 && strThemeSettings == xtpIniVisualStudio2015Dark);
			break;
		case ID_OPTIONS_STYLE_WINDOWS7SCENIC:
			bSet = (xtpThemeResource && strThemeSettings == xtpIniWindows7Blue);
			break;
		default:
			ASSERT(!"Unsupported theme selected");
			break;
	}

	pCmdUI->SetRadio(bSet);
}

void CMainFrame::OnSettingChange(UINT uFlags, LPCTSTR lpszSection)
{
	BaseFrame::OnSettingChange(uFlags, lpszSection);
}

void CMainFrame::OnUpdateEnableMDIWindows(CCmdUI* pCmdUI)
{
	ASSERT(NULL != pCmdUI);
	pCmdUI->Enable(MDIGetActive() != NULL);
}

void CMainFrame::OnWindowArrange()
{
	MDIIconArrange();
}

void CMainFrame::OnWindowCascade()
{
	MDICascade();
}

void CMainFrame::OnWindowTileHorz()
{
	MDITile(MDITILE_HORIZONTAL);
}

void CMainFrame::OnWindowTileVert()
{
	MDITile(MDITILE_VERTICAL);
}

void CMainFrame::ShowOptionsDialog(OptionsPage nSelectedPage /*= xtpOptionsPageGeneral*/)
{
	XTPListBoxStyle nTheme;
	switch (XTPPaintManager()->GetCurrentTheme())
	{
	case xtpThemeOffice2013:
		nTheme = xtpListBoxOffice2013;
		break;
	case xtpThemeResource:
	case xtpThemeRibbon:
	case xtpThemeOffice2007System:
		nTheme = xtpListBoxOffice2007;
		break;
	case xtpThemeOfficeXP:
		nTheme = xtpListBoxOfficeXP;
		break;
	default:
		nTheme = xtpListBoxStandard;
		break;
	}

	CXTPPropertyPageListNavigator* pList = new CXTPPropertyPageListNavigator();
	pList->SetListStyle(nTheme);

	CXTPPropertySheet cs(_T("Options"));
	cs.m_psh.dwFlags |= PSH_NOAPPLYNOW;
	cs.SetNavigator(pList);

	CXTPPropertyPage* pActivePage = NULL;

	CCustomizePageGeneral pageCustomizeGeneral;
	cs.AddPage(&pageCustomizeGeneral);
	if (xtpOptionsPageGeneral == nSelectedPage)
	{
		pActivePage = &pageCustomizeGeneral;
	}

	CXTPRibbonCustomizePage pageCustomizeRibbon(GetCommandBars());
	cs.AddPage(&pageCustomizeRibbon);
	pageCustomizeRibbon.AddCategories(IDR_MAINFRAME);
	if (xtpOptionsPageRibbon == nSelectedPage)
	{
		pActivePage = &pageCustomizeRibbon;
	}

	CXTPRibbonCustomizeQuickAccessPage pageQuickAccess(GetCommandBars());
	cs.AddPage(&pageQuickAccess);
	pageQuickAccess.AddCategories(IDR_MAINFRAME);
	if (xtpOptionsPageQAT == nSelectedPage)
	{
		pActivePage = &pageQuickAccess;
	}

	cs.SetResizable();

	if (NULL != pActivePage)
	{
		cs.SetActivePage(pActivePage);
	}

	cs.DoModal();
}

